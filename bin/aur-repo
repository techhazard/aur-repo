#!/bin/bash
set -euo pipefail

package="${1?need package name as 1st argument}"

AUR_BASE_URL="${AUR_BASE_URL:-'https://aur.archlinux.org'}"
AUR_BUILD_DIR="${XDG_CACHE_HOME:=/var/cache}/aur-repo"
AUR_REPO_DIR="${XDG_CONFIG_HOME:=/var/lib}/aur-repo"


EXTRA_MAKEPKG_FLAGS="${EXTRA_MAKEPKG_FLAGS:-""}"

function msg() {
	echo >&2 "${package}: ${*}"
}

if [[ -n "${DEBUG:-}" ]]; then
	function dbg() {
		echo >&2 "DEBUG: ${*}"
	}
else
	function dbg() {
		builtin true
	}
fi

function gpg_generate_key() {
	local gpg_user="${USER}@${HOSTNAME}.local"
	# TODO: 100 years? maybe we should think about key-rotation
	dbg "Generating GPG key for ${gpg_user}"
	gpg --batch --passphrase "" --pinentry-mode loopback --quick-generate-key "${gpg_user}" default default 100y 2>/dev/null && gpg_get_fp "${gpg_user}"
}

function gpg_get_fp() {
	local gpg_user="${USER}@${HOSTNAME}.local"
	dbg "Printing gpg key for $gpg_user"
	gpg --list-secret-keys --keyid-format short --with-colons "${1}" 2>/dev/null | grep '^sec' | awk -F: '$1=="sec" {print $5}'
}

function git_pull_changes() {
	dbg "pulling changes for ${PWD}"
	git fetch
	git clean -e '*pkg*' -d  -f .
	git reset --hard HEAD
	git pull -r
}

function aur_package_names() {
	dbg "listing packages"
	makepkg --packagelist | awk -F/ '{print $NF}'
}

function aur_package_signatures() {
	aur_package_names | sed -e 's!$!.sig!'
}

function aur_packages_and_signatures() {
	aur_package_names | sed -e 's!^.*$!\0\n\0.sig!'
}

function git_get_epoch() {
	dbg "git get epoch"
	git show -q --date=raw | awk '{if ($1 == "Date:") {print $2}}'
}

function aur_build_packages() {
	declare -x SOURCE_DATE_EPOCH

	if aur_package_names | sed 's/$/.sig/' | xargs stat &>/dev/null; then
		msg "All packages already exist, skipping build"
		return 0
	fi

	msg "extra flags: ${EXTRA_MAKEPKG_FLAGS:=""}"

	# Golang specifics
	export GOCACHE="${build_dir}/.cache"
	export GOPATH="${build_dir}/go"

	# for repeatable builds, set timestamp to the latest git commit
	SOURCE_DATE_EPOCH="$(git_get_epoch)"

	makepkg --cleanbuild --check --clean ${EXTRA_MAKEPKG_FLAGS} --sign --key "${gpg_fp}" --force --noprogressbar
}

function add_packages_to_repo() {
	aur_package_names | sed 's/.*$/\0\n\0.sig/' | xargs cp -t "${AUR_REPO_DIR}/"
	aur_package_names | xargs -IPKG repo-add -v -n -p --sign --key "${gpg_fp}" "${AUR_REPO_DIR}/PKG"
}


function main() {
	local aur_package="${1}"
	local build_dir aur_url
	local gpg_user gpg_fp

	aur_url="${AUR_REPO_URL}/${aur_package}.git"
	build_dir="${AUR_BUILD_DIR}/${aur_package}"

	gpg_fp="$(gpg_get_fp "${gpg_user}" || gpg_generate_key "${gpg_user}" )"

	if [[ ! -d "${build_dir}" ]]; then
		git clone "${aur_url}" "${build_dir}"
	fi

	cd "${build_dir}"
	git remote set-url origin "${aur_url}"

	aur_pull_changes
	aur_build_package

	add_packages_to_repo
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
